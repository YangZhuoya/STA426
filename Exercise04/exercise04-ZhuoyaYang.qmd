---
title: "Exercise 04"
author: "Zhuoya Yang (YangZhuoya)"
date: today
format: 
    html:
      toc: true
      self-contained: true
      highlight-style: github
      code-line-numbers: true
editor_options: 
    chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
The purpose of this exercise is to simulate some “microarray” data and explore how well different statistical tests separate true “differential expression” (changes in the mean for a given feature) in a small sample situation. This will introduce you to: i) simulation; ii) metrics to assess statistical performance; iii) variations of the classical t-test.

Specifically, we will create a synthetic dataset with replicates from 2 experimental conditions and put in differential expression for some of the features. The goal is to see how well different statistical summaries can distinguish between those “truly” differential and those not differential.

Below is some R code to get you started.

```{r }
library("limma")
library("ggplot2")
```

Next, we set some parameters for the simulation. Modify these to explore alternative situations.

```{r }
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential"
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE

d0 <- 1
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
```

Note: there are some details regarding the scaled inverse chi-square distribution that you may want to explore. For example, see the wiki description.

Next, we can generate a table of (null) data (i.e., no differential features):

```{r}
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
            nr=nGenes,nc=nSamples)
```

And, we can add in “differential expression”, randomly chosen to be in the positive or negative direction, to a set of indices chosen:

```{r}
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
```

## Question 1

*First, do an exploratory analysis of the true (simulated) and observed (calculated from data) variances. For the observed variances, compute the residual variance for each row of y (i.e., pooled variance of the two groups of simulated samples, not the row-wise variance; see the denominator of the classical two-sample t-statistic) and look at the distribution of them, of the true variances (from the simulated sd) and make a scatter plot of true versus observed. Often, viewing variances on the log scale is preferred.*

We need to calculate observed variances and ture variances then do the scatter plot:

```{r }
# Calculating observed variances
n1 <- n2 <- nSamples / 2 
observed_variances <- numeric(nGenes)

for (i in 1:nGenes) {
    s1_sq <- var(y[i, grp == 0])
    s2_sq <- var(y[i, grp == 1])
    sp_sq <- ((n1 - 1) * s1_sq + (n2 - 1) * s2_sq) / (n1 + n2 - 2)
    observed_variances[i] <- sp_sq
}

# Calculating true variances
true_variances <- sd^2

# Scatter plot of true vs observed variances
plot(log(true_variances), log(observed_variances), xlab="Log(True Variances)", ylab="Log(Observed Variances)", main="True vs Observed Variances")
abline(a=0, b=1, col="red") 
```

The plot shows the log-transformed true variances against the log-transformed observed variances. The plots indicates that the observed variance roughly matches the true variance.

## Question 2

*Produce a visualization that demonstrates that you understand the “differential expression” that we introduced into the simulation. There are many possibilities; use your creativity.*

Ramdonly choose 10 non differential expressed genes and 10 differential expressed genes. Draw the violin plots of the expression levels of these selected genes by groups.                        
```{r }
set.seed(21)
# Select a subset of genes: 10 from differentially expressed and 10 not
random_10_non_diff_genes <- sample(setdiff(1:nGenes, indD), 10) 
selected_genes <- c(indD[1:10], random_10_non_diff_genes)  

# Prepare data for ggplot
df <- as.data.frame(t(y[selected_genes, ]))
df$Group <- factor(grp)

# Create violin plots for selected genes
library(reshape2)
df_melted <- melt(df, id.vars="Group")

ggplot(df_melted, aes(x=Group, y=value, fill=Group)) + 
  geom_violin() +  
  facet_wrap(~variable, scales="free_y", ncol=5) +
  theme_light() +
  labs(title="Expression levels of selected genes by group",
       x="Experimental Group",
       y="Expression Level") +
  theme(legend.position="none")
```

The genes V1-V10 correspond to the first 10 genes in the selected_genes vector, which are made differentially expressed. Genes V11-V20 correspond to genes that are not made differentially expressed. As can be seen in the figure, in V1-V10, basically all the genes show obvious differential expression. And some of the genes in V11-V20 look to be differentially expressed as well, such as V17 and V20, which may be due to errors caused by randomly generating the data.

Next, we create a design matrix to represent the linear model to be fitted (to each row of the table): 

```{r}
(design <- model.matrix(~grp))
```

## Question 3

*In practical terms, what is the interpretation of the two columns of the design matrix with the parameterization shown above?*

The design matrix has two columns: An intercept column and a column for the effects of groups. In practical terms, the first column represents the average expression level for the genes in the first experimental group(grp==0).The second colunm represents the difference in the average expression between the second experimental group (grp==1) and the first experimental group(grp==0).

Below is the heart of the standard limma pipeline:

```{r }
fit <- lmFit(y,design)
fit <- eBayes(fit)

names(fit)
```

First, the linear model is fit for each feature (row) of the table y. Second, the variance parameters are moderated and then moderated-t/F statistics can be calculated. Several elements are added to the fit object after these two steps; you may wish to consult the help page ?"MArrayLM-class" for further details about these elements.

Below, we can plot the moderated t-statistics, coloured by the true differential “status”. We can see that the moderated t-statistics do a reasonable job of separating the truly differential features from those that do not change, but it is not perfect (there is noise in the that, so this is expected). Note that this is also a luxury of a simulated dataset; in a real dataset, we do not know the truth.

```{r}
cols <- rep("non-differential",nrow(y))
cols[indD] <- "differential"

df <- data.frame(feature=1:length(cols),
                 t=fit$t[,2],
                 status=cols)

ggplot(df, aes(x=feature, y=t, colour=status)) + 
  geom_point() + ylim(-10,10)
```

## Question 4

*For each row (each feature in the experiment) of y, calculate the classical 2-sample t-test. See ?t.test for more details about the built-in R function to do this calculation and convince yourself which arguments to use to match the classical t-test described in the lecture. Add a visualization similar to the above plot for the classical t-statistic and the log-fold-change (mean difference of the 2 groups). By eye, which statistic best separates the truly differential from non-differential?*

First do the t-test and plot for t-statistic:

```{r }
suppressWarnings({
    # Calculate the classical 2-sample t-test for each feature
    t_stats <- numeric(nGenes)
    log_fold_changes <- numeric(nGenes)

    for (i in 1:nGenes) {
        t_result <- t.test(y[i, grp == 0], y[i, grp == 1], var.equal = TRUE)
        t_stats[i] <- t_result$statistic
        log_fold_changes[i] <- log2(mean(y[i, grp == 1]) / mean(y[i, grp == 0]))
    }
})

# Create data frame for plotting
plot_df <- data.frame(
  feature = 1:nGenes,
  t_statistic = t_stats,
  log_fold_change = log_fold_changes,
  status = ifelse(1:nGenes %in% indD, "differential", "non-differential")
)

# Plot for t-statistic
ggplot(plot_df, aes(x=feature, y=t_statistic, colour=status)) + 
  geom_point() + 
  labs(title="Classical t-statistic for each gene", 
       x="Feature", 
       y="T-Statistic") + 
  ylim(-10,10) +
  theme_minimal()

```

Then plot for log-fold-change:

```{r}
ggplot(plot_df, aes(x=feature, y=log_fold_change, colour=status)) + 
  geom_point() + 
  labs(title="Log-fold-change for each gene", 
       x="Feature", 
       y="Log-Fold-Change") +
  ylim(-max(abs(log_fold_changes)), max(abs(log_fold_changes))) +  # adjust limits to show full range
  theme_minimal()
```

By eye, the classical 2-sample t-test better separates the truly differential from non-differential than log-fold-change.

## Question 5

*Pick a reasonable metric to compare the methods, such as an ROC curve, false discovery plot, power versus achieved FDR. Using this metric / curve, formally compare the performance of the classical t-test (calculated in Question 4), the moderated t-test (plotted above) and the log-fold-change or mean difference (fit$coef). Two packages that are useful for these kind of plots include: ROCR or iCOBRA.*

I choose to use ROC and the AUC to compare different methods.

```{r}
library(ROCR)

# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)

# Get predictions
predictions_classical_t <- prediction(as.numeric(t_stats), true_labels)
predictions_moderated_t <- prediction(as.numeric(fit$t[, 2]), true_labels)
predictions_logFC <- prediction(as.numeric(fit$coef[, 2]), true_labels)

# ROC curves
roc_classical <- performance(predictions_classical_t, "tpr", "fpr")
roc_moderated <- performance(predictions_moderated_t, "tpr", "fpr")
roc_logFC <- performance(predictions_logFC, "tpr", "fpr")

# AUCs
auc_classical <- performance(predictions_classical_t, "auc")@y.values[[1]]
auc_moderated <- performance(predictions_moderated_t, "auc")@y.values[[1]]
auc_logFC <- performance(predictions_logFC, "auc")@y.values[[1]]

# Plotting ROC curves
plot(roc_classical, col="blue", main="ROC curves for different methods")
lines(roc_moderated@x.values[[1]], roc_moderated@y.values[[1]], col="red")  # Explicit extraction
lines(roc_logFC@x.values[[1]], roc_logFC@y.values[[1]], col="green")  # Explicit extraction
legend(0.6, 0.2, legend=c("Classical t-test", "Moderated t-test", "Log-fold-change"), 
       col=c("blue", "red", "green"), lty=1)

cat("AUC for Classical t-test:", auc_classical, "\n")
cat("AUC for Moderated t-test:", auc_moderated, "\n")
cat("AUC for Log-fold-change:", auc_logFC, "\n")
```

The classical t-test has highest AUC and the log-fold-change has lowest. But the differences in AUC between the three methods are very small. As for ROC, curves of classical t-test and moderated t-test are strongly overlapped. Log-fold-change has a different curve which is more twisted. It is difficult to choose the obviously best methods among the three methods.

Next, we will run a standard ‘limma’ differential expression (DE) analysis on a real microarray dataset. In particular, we will explore the combination of design matrices and contrast matrices to answer DE questions-of-interest. If you need additional resources to understand this exercise or the methods behind it, it is strongly encourage to skim both the limma paper and the limma user’s guide; the main details are also given in the lecture.

```{r }
suppressPackageStartupMessages(library("affy"))
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
```

It is generally good practice to store the details of an experiment (e.g., the set of samples) in a machine-readable table, like the provided targets.txt file; this is known as metadata. Have a look at this file in a text editor or a spreadsheet to see what kind of information is typically described. The following code reads in this metadata file, reads in the Affymetrix data and processes it with a method called RMA (robust multichip analysis).

```{r}
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
targets
```

```{r}
abatch <- ReadAffy(filenames=targets$filename,
                   celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
```

It is also good practice to look at overall summaries of a large dataset, such as a multidimensional scaling (MDS) plot to get an idea of the relations between samples. In this case, “distances on the plot approximate the typical log2 fold changes” (?plotMDS):

```{r}
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot

df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
                 treatment = targets$estrogen,
                 time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
  geom_point(size = 4)
```

In order to run the standard limma pipeline for differential expression, we need a design matrix and optionally, a contrast matrix. In the code below, the metadata is encoded into a factor variable that is used for creating the design matrix. It is suggested to look at and understand the design matrix before proceeding.

```{r}
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)

# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
```

At this stage, it may make sense to filter out control probesets or remove lowly expressed genes (and you will see this in other pipelines), but for simplicity, we go straight to the model fitting. From the design matrix, we can now fit the linear model (for each gene):

```{r}
fit <- lmFit(eset, design)
```

To make inferences about parameters defined in the design matrix, we can now define a contrast matrix, which can be constructed by hand or by using the makeContrasts() function. Again, it is suggested to study this matrix and make sure you understand what it is doing (i.e., in terms of model parameters) before proceeding. A potentially useful resource for using design and contrast matrices for differential expression analyses is this paper.

```{r}
cont.matrix <- makeContrasts(E10="present10-absent10",
                             E48="present48-absent48",
                             Time="absent48-absent10",levels=design)
cont.matrix
```

Now, the contrasts can be fit and the moderation of the variance parameters (as above and discussed in the lecture) can be performed:

```{r}
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
```

```{r}
names(fit2)
```

At this point, a lot of elements have now been added to the fit2 object and it would again be worth studying the details. See if you can understand what the different components are and if you need more details, type ?"MArrayLM-class" to see more information.

Next, we wish to summarize the differential expression statistics, such as via moderated-t (or F) statistics and perhaps (adjusted) P-values. The topTable() function has many facilities for this:

```{r}
topTable(fit2, coef=1, n=5)
```

```{r}
topTable(fit2, coef=2, n=5)
```

Here, it is worth understanding exactly what coef=1 or coef=2 are testing before proceeding.

It is also recommended to look at the data that goes into the statistical test in the first place.For example, a plot for one gene’s expression:

```{r}
df <- cbind(df, expr = exprs(eset)["39642_at",])
df$condition <- paste0(df$treatment, df$time.h)

ggplot(df, aes(x = condition, y = expr, shape=treatment, colour=time.h)) +
  geom_point(size = 4)
```

## Question 6

*From the matrix of summarized Affymetrix data that went into the limma pipeline in the first place (exprs(eset)), manually calculate the logFC and AveExpr for one of the top differentially expressed features.*

Important side note: if your experiment is sufficiently simple (e.g., a 1-way design), you may not need a contrast matrix at all; the differential expression of interest can be defined through column(s) of the design matrix (see discussion in the lecture notes).    

First choose a gene then do the computation:

```{r }
# Get top gene for the first contrast
top_gene <- topTable(fit2, coef=1, n=1)
top_probe_id <- rownames(top_gene)
gene_expr <- exprs(eset)[top_probe_id, ]

# Define the conditions("present" and "absent" treatments at time.h = 10)
condition_present_10h <- which(targets$estrogen == "present" & targets$time.h == "10")
condition_absent_10h <- which(targets$estrogen == "absent" & targets$time.h == "10")

# Calculate logFC for the gene between the two conditions
logFC <- mean(gene_expr[condition_present_10h]) - mean(gene_expr[condition_absent_10h])

# Calculate AveExpr for the gene
AveExpr <- mean(gene_expr)

cat("gene id:",top_probe_id, "\n")
cat("Log Fold Change (logFC):", logFC, "\n")
cat("Average Expression (AveExpr):", AveExpr, "\n")

```
