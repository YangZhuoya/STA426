df <- as.data.frame(t(y[selected_genes, ]))
df$Group <- factor(grp)
# Create a boxplot for selected genes
df_melted <- melt(df, id.vars="Group")
ggplot(df_melted, aes(x=Group, y=value, fill=Group)) +
geom_boxplot() +
facet_wrap(~variable, scales="free_y", ncol=10) +
theme_light() +
labs(title="Expression levels of selected genes by group",
x="Experimental Group",
y="Expression Level") +
theme(legend.position="none")
(design <- model.matrix(~grp))
# Select a subset of genes for visualization: some from differentially expressed and some not
set.seed(21)  # for reproducibility
random_non_diff_genes <- sample(setdiff(1:nGenes, indD), 10)  # 10 random non-differential genes
selected_genes <- c(indD[1:10], random_non_diff_genes)  # 10 differential + 10 non-differential
# Prepare data for ggplot
df <- as.data.frame(t(y[selected_genes, ]))
df$Group <- factor(grp)
# Create a boxplot for selected genes
library(reshape2)
df_melted <- melt(df, id.vars="Group")
ggplot(df_melted, aes(x=Group, y=value, fill=Group)) +
geom_boxplot() +
facet_wrap(~variable, scales="free_y", ncol=5) +  # Adjusted to 5 columns for better viewing
theme_light() +
labs(title="Expression levels of selected genes by group",
x="Experimental Group",
y="Expression Level") +
theme(legend.position="none")
indD
diff
random_non_diff_genes
knitr::opts_chunk$set(echo = TRUE)
library("limma")
library("ggplot2")
library("limma")
library("ggplot2")
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential"
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
# Calculating observed variances
n1 <- n2 <- nSamples / 2
observed_variances <- numeric(nGenes)
for (i in 1:nGenes) {
s1_sq <- var(y[i, grp == 0])
s2_sq <- var(y[i, grp == 1])
sp_sq <- ((n1 - 1) * s1_sq + (n2 - 1) * s2_sq) / (n1 + n2 - 2)
observed_variances[i] <- sp_sq
}
# Calculating true variances
true_variances <- sd^2
# Scatter plot of true vs observed variances
plot(log(true_variances), log(observed_variances), xlab="Log(True Variances)", ylab="Log(Observed Variances)", main="True vs Observed Variances")
abline(a=0, b=1, col="red")
set.seed(21)
# Select a subset of genes: 10 from differentially expressed and 10 not
random_10_non_diff_genes <- sample(setdiff(1:nGenes, indD), 10)
selected_genes <- c(indD[1:10], random_10_non_diff_genes)
# Prepare data for ggplot
df <- as.data.frame(t(y[selected_genes, ]))
df$Group <- factor(grp)
# Create violin plots for selected genes
library(reshape2)
df_melted <- melt(df, id.vars="Group")
ggplot(df_melted, aes(x=Group, y=value, fill=Group)) +
geom_violin() +
facet_wrap(~variable, scales="free_y", ncol=5) +
theme_light() +
labs(title="Expression levels of selected genes by group",
x="Experimental Group",
y="Expression Level") +
theme(legend.position="none")
(design <- model.matrix(~grp))
fit <- lmFit(y,design)
fit <- eBayes(fit)
names(fit)
cols <- rep("non-differential",nrow(y))
cols[indD] <- "differential"
df <- data.frame(feature=1:length(cols),
t=fit$t[,2],
status=cols)
ggplot(df, aes(x=feature, y=t, colour=status)) +
geom_point() + ylim(-10,10)
suppressWarnings({
# Calculate the classical 2-sample t-test for each feature
t_stats <- numeric(nGenes)
log_fold_changes <- numeric(nGenes)
for (i in 1:nGenes) {
t_result <- t.test(y[i, grp == 0], y[i, grp == 1], var.equal = TRUE)
t_stats[i] <- t_result$statistic
log_fold_changes[i] <- log2(mean(y[i, grp == 1]) / mean(y[i, grp == 0]))
}
})
# Create data frame for plotting
plot_df <- data.frame(
feature = 1:nGenes,
t_statistic = t_stats,
log_fold_change = log_fold_changes,
status = ifelse(1:nGenes %in% indD, "differential", "non-differential")
)
# Plot for t-statistic
ggplot(plot_df, aes(x=feature, y=t_statistic, colour=status)) +
geom_point() +
labs(title="Classical t-statistic for each gene",
x="Feature",
y="T-Statistic") +
ylim(-10,10) +
theme_minimal()
ggplot(plot_df, aes(x=feature, y=log_fold_change, colour=status)) +
geom_point() +
labs(title="Log-fold-change for each gene",
x="Feature",
y="Log-Fold-Change") +
ylim(-max(abs(log_fold_changes)), max(abs(log_fold_changes))) +  # adjust limits to show full range
theme_minimal()
library(ROCR)
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions
predictions_classical_t <- prediction(as.numeric(t_stats), true_labels)
predictions_moderated_t <- prediction(as.numeric(fit$t[, 2]), true_labels)
predictions_logFC <- prediction(as.numeric(fit$coef[, 2]), true_labels)
# ROC curves
roc_classical <- performance(predictions_classical_t, "tpr", "fpr")
roc_moderated <- performance(predictions_moderated_t, "tpr", "fpr")
roc_logFC <- performance(predictions_logFC, "tpr", "fpr")
# AUCs
auc_classical <- performance(predictions_classical_t, "auc")@y.values[[1]]
auc_moderated <- performance(predictions_moderated_t, "auc")@y.values[[1]]
auc_logFC <- performance(predictions_logFC, "auc")@y.values[[1]]
# Plotting ROC curves
plot(roc_classical, col="blue", main="ROC curves for different methods")
lines(roc_moderated@x.values[[1]], roc_moderated@y.values[[1]], col="red")  # Explicit extraction
lines(roc_logFC@x.values[[1]], roc_logFC@y.values[[1]], col="green")  # Explicit extraction
legend(0.6, 0.2, legend=c("Classical t-test", "Moderated t-test", "Log-fold-change"),
col=c("blue", "red", "green"), lty=1)
cat("AUC for Classical t-test:", auc_classical, "\n")
cat("AUC for Moderated t-test:", auc_moderated, "\n")
cat("AUC for Log-fold-change:", auc_logFC, "\n")
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions using absolute values
predictions_classical_t <- prediction(as.numeric(abs(t_stats)), true_labels)  # Using absolute values
predictions_moderated_t <- prediction(as.numeric(abs(fit$t[, 2])), true_labels)  # Using absolute values
predictions_logFC <- prediction(as.numeric(abs(fit$coef[, 2])), true_labels)  # Using absolute values
# ROC curves
roc_classical <- performance(predictions_classical_t, "tpr", "fpr")
roc_moderated <- performance(predictions_moderated_t, "tpr", "fpr")
roc_logFC <- performance(predictions_logFC, "tpr", "fpr")
# AUCs
auc_classical <- performance(predictions_classical_t, "auc")@y.values[[1]]
auc_moderated <- performance(predictions_moderated_t, "auc")@y.values[[1]]
auc_logFC <- performance(predictions_logFC, "auc")@y.values[[1]]
# Plotting ROC curves
plot(roc_classical, col="blue", main="ROC curves for different methods")
lines(roc_moderated@x.values[[1]], roc_moderated@y.values[[1]], col="red")  # Explicit extraction
lines(roc_logFC@x.values[[1]], roc_logFC@y.values[[1]], col="green")  # Explicit extraction
legend(0.6, 0.2, legend=c("Classical t-test", "Moderated t-test", "Log-fold-change"),
col=c("blue", "red", "green"), lty=1)
cat("AUC for Classical t-test:", auc_classical, "\n")
cat("AUC for Moderated t-test:", auc_moderated, "\n")
cat("AUC for Log-fold-change:", auc_logFC, "\n")
set.seed(22)
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions using absolute values
predictions_classical_t <- prediction(as.numeric(abs(t_stats)), true_labels)  # Using absolute values
predictions_moderated_t <- prediction(as.numeric(abs(fit$t[, 2])), true_labels)  # Using absolute values
predictions_logFC <- prediction(as.numeric(abs(fit$coef[, 2])), true_labels)  # Using absolute values
# ROC curves
roc_classical <- performance(predictions_classical_t, "tpr", "fpr")
roc_moderated <- performance(predictions_moderated_t, "tpr", "fpr")
roc_logFC <- performance(predictions_logFC, "tpr", "fpr")
# AUCs
auc_classical <- performance(predictions_classical_t, "auc")@y.values[[1]]
auc_moderated <- performance(predictions_moderated_t, "auc")@y.values[[1]]
auc_logFC <- performance(predictions_logFC, "auc")@y.values[[1]]
# Plotting ROC curves
plot(roc_classical, col="blue", main="ROC curves for different methods")
lines(roc_moderated@x.values[[1]], roc_moderated@y.values[[1]], col="red")  # Explicit extraction
lines(roc_logFC@x.values[[1]], roc_logFC@y.values[[1]], col="green")  # Explicit extraction
legend(0.6, 0.2, legend=c("Classical t-test", "Moderated t-test", "Log-fold-change"),
col=c("blue", "red", "green"), lty=1)
cat("AUC for Classical t-test:", auc_classical, "\n")
cat("AUC for Moderated t-test:", auc_moderated, "\n")
cat("AUC for Log-fold-change:", auc_logFC, "\n")
set.seed(22)
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions using absolute values
predictions_classical_t <- prediction(as.numeric(abs(t_stats)), true_labels)  # Using absolute values
predictions_moderated_t <- prediction(as.numeric(abs(fit$t[, 2])), true_labels)  # Using absolute values
predictions_logFC <- prediction(as.numeric(abs(fit$coef[, 2])), true_labels)  # Using absolute values
# ROC curves
roc_classical <- performance(predictions_classical_t, "tpr", "fpr")
roc_moderated <- performance(predictions_moderated_t, "tpr", "fpr")
roc_logFC <- performance(predictions_logFC, "tpr", "fpr")
# AUCs
auc_classical <- performance(predictions_classical_t, "auc")@y.values[[1]]
auc_moderated <- performance(predictions_moderated_t, "auc")@y.values[[1]]
auc_logFC <- performance(predictions_logFC, "auc")@y.values[[1]]
# Plotting ROC curves
plot(roc_classical, col="blue", main="ROC curves for different methods")
lines(roc_moderated@x.values[[1]], roc_moderated@y.values[[1]], col="red")  # Explicit extraction
lines(roc_logFC@x.values[[1]], roc_logFC@y.values[[1]], col="green")  # Explicit extraction
legend(0.6, 0.2, legend=c("Classical t-test", "Moderated t-test", "Log-fold-change"),
col=c("blue", "red", "green"), lty=1)
cat("AUC for Classical t-test:", auc_classical, "\n")
cat("AUC for Moderated t-test:", auc_moderated, "\n")
cat("AUC for Log-fold-change:", auc_logFC, "\n")
set.seed(22)
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions using absolute values
predictions_classical_t <- prediction(as.numeric(abs(t_stats)), true_labels)  # Using absolute values
predictions_moderated_t <- prediction(as.numeric(abs(fit$t[, 2])), true_labels)  # Using absolute values
predictions_logFC <- prediction(as.numeric(abs(fit$coef[, 2])), true_labels)  # Using absolute values
# ROC curves
roc_classical <- performance(predictions_classical_t, "tpr", "fpr")
roc_moderated <- performance(predictions_moderated_t, "tpr", "fpr")
roc_logFC <- performance(predictions_logFC, "tpr", "fpr")
# AUCs
auc_classical <- performance(predictions_classical_t, "auc")@y.values[[1]]
auc_moderated <- performance(predictions_moderated_t, "auc")@y.values[[1]]
auc_logFC <- performance(predictions_logFC, "auc")@y.values[[1]]
# Plotting ROC curves
plot(roc_classical, col="blue", main="ROC curves for different methods")
lines(roc_moderated@x.values[[1]], roc_moderated@y.values[[1]], col="red")  # Explicit extraction
lines(roc_logFC@x.values[[1]], roc_logFC@y.values[[1]], col="green")  # Explicit extraction
legend(0.6, 0.2, legend=c("Classical t-test", "Moderated t-test", "Log-fold-change"),
col=c("blue", "red", "green"), lty=1)
cat("AUC for Classical t-test:", auc_classical, "\n")
cat("AUC for Moderated t-test:", auc_moderated, "\n")
cat("AUC for Log-fold-change:", auc_logFC, "\n")
set.seed(22)
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions using absolute values
predictions_classical_t <- prediction(as.numeric(abs(t_stats)), true_labels)
predictions_moderated_t <- prediction(as.numeric(abs(fit$t[, 2])), true_labels)
predictions_logFC <- prediction(as.numeric(abs(fit$coef[, 2])), true_labels)
# ROC curves
roc_classical <- performance(predictions_classical_t, "tpr", "fpr")
roc_moderated <- performance(predictions_moderated_t, "tpr", "fpr")
roc_logFC <- performance(predictions_logFC, "tpr", "fpr")
# AUCs
auc_classical <- performance(predictions_classical_t, "auc")@y.values[[1]]
auc_moderated <- performance(predictions_moderated_t, "auc")@y.values[[1]]
auc_logFC <- performance(predictions_logFC, "auc")@y.values[[1]]
# Plotting ROC curves
plot(roc_classical, col="blue", main="ROC curves for different methods")
lines(roc_moderated@x.values[[1]], roc_moderated@y.values[[1]], col="red")
lines(roc_logFC@x.values[[1]], roc_logFC@y.values[[1]], col="green")
legend(0.6, 0.2, legend=c("Classical t-test", "Moderated t-test", "Log-fold-change"),
col=c("blue", "red", "green"), lty=1)
cat("AUC for Classical t-test:", auc_classical, "\n")
cat("AUC for Moderated t-test:", auc_moderated, "\n")
cat("AUC for Log-fold-change:", auc_logFC, "\n")
suppressPackageStartupMessages(library("affy"))
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
targets
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
treatment = targets$estrogen,
time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
fit <- lmFit(eset, design)
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
topTable(fit2, coef=1, n=5)
topTable(fit2, coef=2, n=5)
df <- cbind(df, expr = exprs(eset)["39642_at",])
df$condition <- paste0(df$treatment, df$time.h)
ggplot(df, aes(x = condition, y = expr, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# Get top gene for the first contrast
top_gene <- topTable(fit2, coef=1, n=1)
top_probe_id <- rownames(top_gene)
gene_expr <- exprs(eset)[top_probe_id, ]
# Define the conditions("present" and "absent" treatments at time.h = 10)
condition_present_10h <- which(targets$estrogen == "present" & targets$time.h == "10")
condition_absent_10h <- which(targets$estrogen == "absent" & targets$time.h == "10")
# Calculate logFC for the gene between the two conditions
logFC <- mean(gene_expr[condition_present_10h]) - mean(gene_expr[condition_absent_10h])
# Calculate AveExpr for the gene
AveExpr <- mean(gene_expr)
cat("gene id:",top_probe_id, "\n")
cat("Log Fold Change (logFC):", logFC, "\n")
cat("Average Expression (AveExpr):", AveExpr, "\n")
knitr::opts_chunk$set(echo = TRUE)
library("limma")
library("ggplot2")
nGenes <- 10000                   # number of "features"
nSamples <- 6                     # number of samples (split equal in 2 groups)
pDiff <- .1                       # percent of genes "differential"
grp <- rep(0:1,each=nSamples/2)   # dummy variable for exp. group
trueFC <- 2                       # log-fold-change of truly DE
d0 <- 1
s0 <- 0.8
sd <- s0*sqrt(d0/rchisq(nGenes,df=d0))  # dist'n of s.d.
y <- matrix(rnorm(nGenes*nSamples,sd=sd),
nr=nGenes,nc=nSamples)
indD <- 1:floor(pDiff*nGenes)
diff <- sample(c(-1,1),max(indD),replace=TRUE)*trueFC
y[indD,grp==1] <- y[indD,grp==1] + diff
# Calculating observed variances
n1 <- n2 <- nSamples / 2
observed_variances <- numeric(nGenes)
for (i in 1:nGenes) {
s1_sq <- var(y[i, grp == 0])
s2_sq <- var(y[i, grp == 1])
sp_sq <- ((n1 - 1) * s1_sq + (n2 - 1) * s2_sq) / (n1 + n2 - 2)
observed_variances[i] <- sp_sq
}
# Calculating true variances
true_variances <- sd^2
# Scatter plot of true vs observed variances
plot(log(true_variances), log(observed_variances), xlab="Log(True Variances)", ylab="Log(Observed Variances)", main="True vs Observed Variances")
abline(a=0, b=1, col="red")
set.seed(21)
# Select a subset of genes: 10 from differentially expressed and 10 not
random_10_non_diff_genes <- sample(setdiff(1:nGenes, indD), 10)
selected_genes <- c(indD[1:10], random_10_non_diff_genes)
# Prepare data for ggplot
df <- as.data.frame(t(y[selected_genes, ]))
df$Group <- factor(grp)
# Create violin plots for selected genes
library(reshape2)
df_melted <- melt(df, id.vars="Group")
ggplot(df_melted, aes(x=Group, y=value, fill=Group)) +
geom_violin() +
facet_wrap(~variable, scales="free_y", ncol=5) +
theme_light() +
labs(title="Expression levels of selected genes by group",
x="Experimental Group",
y="Expression Level") +
theme(legend.position="none")
(design <- model.matrix(~grp))
fit <- lmFit(y,design)
fit <- eBayes(fit)
names(fit)
cols <- rep("non-differential",nrow(y))
cols[indD] <- "differential"
df <- data.frame(feature=1:length(cols),
t=fit$t[,2],
status=cols)
ggplot(df, aes(x=feature, y=t, colour=status)) +
geom_point() + ylim(-10,10)
suppressWarnings({
# Calculate the classical 2-sample t-test for each feature
t_stats <- numeric(nGenes)
log_fold_changes <- numeric(nGenes)
for (i in 1:nGenes) {
t_result <- t.test(y[i, grp == 0], y[i, grp == 1], var.equal = TRUE)
t_stats[i] <- t_result$statistic
log_fold_changes[i] <- log2(mean(y[i, grp == 1]) / mean(y[i, grp == 0]))
}
})
# Create data frame for plotting
plot_df <- data.frame(
feature = 1:nGenes,
t_statistic = t_stats,
log_fold_change = log_fold_changes,
status = ifelse(1:nGenes %in% indD, "differential", "non-differential")
)
# Plot for t-statistic
ggplot(plot_df, aes(x=feature, y=t_statistic, colour=status)) +
geom_point() +
labs(title="Classical t-statistic for each gene",
x="Feature",
y="T-Statistic") +
ylim(-10,10) +
theme_minimal()
ggplot(plot_df, aes(x=feature, y=log_fold_change, colour=status)) +
geom_point() +
labs(title="Log-fold-change for each gene",
x="Feature",
y="Log-Fold-Change") +
ylim(-max(abs(log_fold_changes)), max(abs(log_fold_changes))) +  # adjust limits to show full range
theme_minimal()
set.seed(22)
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions using absolute values
predictions_classical_t <- prediction(as.numeric(abs(t_stats)), true_labels)
predictions_moderated_t <- prediction(as.numeric(abs(fit$t[, 2])), true_labels)
predictions_logFC <- prediction(as.numeric(abs(fit$coef[, 2])), true_labels)
# ROC curves
roc_classical <- performance(predictions_classical_t, "tpr", "fpr")
roc_moderated <- performance(predictions_moderated_t, "tpr", "fpr")
roc_logFC <- performance(predictions_logFC, "tpr", "fpr")
# AUCs
auc_classical <- performance(predictions_classical_t, "auc")@y.values[[1]]
auc_moderated <- performance(predictions_moderated_t, "auc")@y.values[[1]]
auc_logFC <- performance(predictions_logFC, "auc")@y.values[[1]]
# Plotting ROC curves
plot(roc_classical, col="blue", main="ROC curves for different methods")
lines(roc_moderated@x.values[[1]], roc_moderated@y.values[[1]], col="red")
lines(roc_logFC@x.values[[1]], roc_logFC@y.values[[1]], col="green")
legend(0.6, 0.2, legend=c("Classical t-test", "Moderated t-test", "Log-fold-change"),
col=c("blue", "red", "green"), lty=1)
cat("AUC for Classical t-test:", auc_classical, "\n")
cat("AUC for Moderated t-test:", auc_moderated, "\n")
cat("AUC for Log-fold-change:", auc_logFC, "\n")
suppressPackageStartupMessages(library("affy"))
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
# preprocess affymetrix data
targets <- readTargets("targets.txt", path=ddir)
targets$time.h <- factor(targets$time.h)
targets
abatch <- ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- rma(abatch)  # bg correct, normalize, summarize
mds <- plotMDS( exprs(eset), plot = FALSE)  # MDS plot
df <- data.frame(MDS1 = mds$x, MDS2 = mds$y,
treatment = targets$estrogen,
time.h = targets$time.h)
ggplot(df, aes(x = MDS1, y = MDS2, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# do the limma modeling
f <- paste0(targets$estrogen, targets$time.h)
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
fit <- lmFit(eset, design)
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
fit2  <- contrasts.fit(fit, cont.matrix)
fit2  <- eBayes(fit2)
class(fit2)
names(fit2)
topTable(fit2, coef=1, n=5)
topTable(fit2, coef=2, n=5)
df <- cbind(df, expr = exprs(eset)["39642_at",])
df$condition <- paste0(df$treatment, df$time.h)
ggplot(df, aes(x = condition, y = expr, shape=treatment, colour=time.h)) +
geom_point(size = 4)
# Get top gene for the first contrast
top_gene <- topTable(fit2, coef=1, n=1)
top_probe_id <- rownames(top_gene)
gene_expr <- exprs(eset)[top_probe_id, ]
# Define the conditions("present" and "absent" treatments at time.h = 10)
condition_present_10h <- which(targets$estrogen == "present" & targets$time.h == "10")
condition_absent_10h <- which(targets$estrogen == "absent" & targets$time.h == "10")
# Calculate logFC for the gene between the two conditions
logFC <- mean(gene_expr[condition_present_10h]) - mean(gene_expr[condition_absent_10h])
# Calculate AveExpr for the gene
AveExpr <- mean(gene_expr)
cat("gene id:",top_probe_id, "\n")
cat("Log Fold Change (logFC):", logFC, "\n")
cat("Average Expression (AveExpr):", AveExpr, "\n")
set.seed(22)
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions using absolute values
predictions_classical_t <- prediction(as.numeric(abs(t_stats)), true_labels)
predictions_moderated_t <- prediction(as.numeric(abs(fit$t[, 2])), true_labels)
ggplot(plot_df, aes(x=feature, y=log_fold_change, colour=status)) +
geom_point() +
labs(title="Log-fold-change for each gene",
x="Feature",
y="Log-Fold-Change") +
ylim(-max(abs(log_fold_changes)), max(abs(log_fold_changes))) +  # adjust limits to show full range
theme_minimal()
set.seed(22)
# True labels
true_labels <- ifelse(1:nGenes %in% indD, 1, 0)
# Get predictions using absolute values
predictions_classical_t <- prediction(as.numeric(abs(t_stats)), true_labels)
predictions_moderated_t <- prediction(as.numeric(abs(fit$t[, 2])), true_labels)
